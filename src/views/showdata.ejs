<div class="container">
    <h1 class="mt-5 mb-4">Data</h1>
    <!-- Search Box -->
    <input type="text" id="searchInput" class="form-control mb-3" placeholder="Search...">
    <div></div>
    <table class="table table-striped">
        <thead>
            <tr>
                <% Object.keys(data[0]).forEach(function(key) { %>
                    <th>
                        <%= key %>
                            <!-- Sorting Buttons -->
                            <button class="btn btn-sm btn-outline-secondary"
                                onclick="sortTable('<%= key %>')">Sort</button>
                    </th>
                    <% }); %>
            </tr>
        </thead>
        <tbody id="tableBody">
        </tbody>
    </table>
</div>

<script>

    let clickcount = 1;
    // Search Functionality
    document.getElementById('searchInput').addEventListener('input', function () {
        var query = this.value.toLowerCase();
        document.querySelectorAll('#tableBody tr').forEach(function (row) {
            var found = false;
            row.querySelectorAll('td').forEach(function (cell) {
                if (cell.textContent.toLowerCase().indexOf(query) > -1) {
                    found = true;
                }
            });
            row.style.display = found ? '' : 'none';
        });
    });

    // Sorting Functionality
    function sortTable(columnName) {


        var index = Array.from(document.querySelectorAll('th')).findIndex((th) => {
            const data = th.textContent.toString().replace("Sort", "");

            return data.trim().toLowerCase() == columnName.trim().toLowerCase();
        });

        var rows = Array.from(document.querySelectorAll('#tableBody tr'));

        rows.sort(function (a, b) {
            var aValue = a.children[index] ? a.children[index].textContent.toString().toUpperCase() : '';
            var bValue = b.children[index] ? b.children[index].textContent.toString().toUpperCase() : '';

            // Check if the values are numbers
            var aValueIsNumber = !isNaN(parseFloat(aValue)) && isFinite(aValue);
            var bValueIsNumber = !isNaN(parseFloat(bValue)) && isFinite(bValue);

            // If both values are numbers, compare them as numbers
            if (aValueIsNumber && bValueIsNumber) {
                aValue = parseFloat(aValue);
                bValue = parseFloat(bValue);
                if (clickcount % 2 === 0) {
                    return aValue - bValue;
                } else {
                    return bValue - aValue;
                }
            } else { // If not numbers, compare them as strings
                if (clickcount % 2 === 0) {
                    return aValue.localeCompare(bValue);
                } else {
                    return bValue.localeCompare(aValue);
                }
            }
        });

        clickcount++;

        rows.forEach(row => document.getElementById('tableBody').appendChild(row));
    }

    window.onload = function () {
        const pageurl = window.location.href.toString();
        const URL = pageurl.replace("upload", "uploads");
        console.log(URL);
        fetch(URL) // Adjust the URL based on your backend API endpoint
            .then(response => response.json())
            .then(data => {
                // Call function to populate table with data
                paginate(data);
            })
            .catch(error => console.error('Error fetching data:', error));
    }

    // Function to populate table with data
    function paginate(data) {
        // Number of items per page
        var itemsPerPage = 10;

        // Calculate total number of pages
        var totalPages = Math.ceil(data.length / itemsPerPage);

        // Initialize current page to 1
        var currentPage = 1;

        // Function to display data for current page
        function displayData(page) {
            var startIndex = (page - 1) * itemsPerPage;
            var endIndex = Math.min(startIndex + itemsPerPage, data.length);
            var pageData = data.slice(startIndex, endIndex);

            // Clear previous content
            var tableBody = document.getElementById('tableBody');
            tableBody.innerHTML = '';

            pageData.forEach(function (item) {
                var row = '<tr>';
                Object.values(item).forEach(function (value) {
                    row += '<td>' + value + '</td>';
                });
                row += '</tr>';
                tableBody.innerHTML += row;
            });

        }

        // Initial display of data
        displayData(currentPage);

        // Function to handle pagination button clicks
        function goToPage(page) {
            currentPage = page;
            displayData(currentPage);
        }

        // Function to generate pagination buttons
        function generatePaginationButtons() {
            var paginationDiv = document.createElement('div');
            paginationDiv.classList.add('pagination');

            for (var i = 1; i <= totalPages; i++) {
                var button = document.createElement('button');
                button.textContent = i;
                button.addEventListener('click', function () {
                    goToPage(parseInt(this.textContent));
                });
                paginationDiv.appendChild(button);
            }

            return paginationDiv;
        }

        // Add pagination buttons to the page
        document.body.appendChild(generatePaginationButtons());
    }


</script>